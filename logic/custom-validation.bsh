/***************************** CUSTOM VALIDATION ******************************/
//Precondition: Value of maximum height is not negative
String getName(String ref, String defaultName) {
  String refMaxHeight = "Mound/Mound_Admin/Maximum_Height_in_m";

  if (ref.equals(refMaxHeight)){
    //Check value of the field Maximum Height and if it is not empty then the field value must be greater than Minimum Height
    String val = getFieldValue(refMaxHeight);
    double dblVal;
    try {
      dblVal = Double.parseDouble(val);
    } catch(NumberFormatException e) {
      dblVal = -1.0;
    }
    //If the value is not -1.0 then field is not empty
    if(dblVal != -1.0)
      return defaultName + " field must be greater than Minimum Height (m) field";
  }

  //Return default blank validation message
  return defaultName;
}

String getCond(String ref, String defaultCond) {
  return defaultCond;
}

//Precondition: Value of maximum height is not negative
// Overrides autogenerated definition
boolean isValidField(String ref) {
  String refMaxHeight = "Mound/Mound_Admin/Maximum_Height_in_m";
  if (!ref.equals(refMaxHeight))
    return !isNull(getFieldValue(ref)); // Do blank check

  // Do range check
  String val = getFieldValue(refMaxHeight);
  double dblVal;
  try {
    dblVal = Double.parseDouble(val);
  } catch(NumberFormatException e) {
    dblVal = -1.0;
  }
  //Get value from the field minimum height and parse it into a double
  String refMinHeight = "Mound/Mound_Admin/Minimum_Height_in_m";
  String valMinHeight = getFieldValue(refMinHeight);
  double dblMinVal;
  try {
    dblMinVal = Double.parseDouble(valMinHeight);
  } catch(NumberFormatException e) {
    dblMinVal = -1.0;
  }
  //Return true maximum height is greater than or equal to minimum height, else false
  return dblVal >= dblMinVal;
}

// Overrides autogenerated definition
List fieldPair(String ref, String name, String cond) {
  name = getName(ref, name);
  cond = getCond(ref, cond);

  List fp = new ArrayList();
  fp.add(ref);
  fp.add(name);
  fp.add(cond);

  return fp;
}
